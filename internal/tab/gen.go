//go:build ignore

package main

import (
	"log"

	"github.com/nekrassov01/aws-describer/internal/tmpl"
)

type templateData struct {
	Name       string
	Package    string
	InputType  string
	SortStmt   string
	MergeStmt  string
	IgnoreStmt string
	HasPolicy  bool
}

func gen(filePath string, data templateData) error {
	template := `// Code generated by table/gen.go. DO NOT EDIT.

package {{ .Package }}

import (
	"sort"

	"github.com/nekrassov01/aws-describer/internal/api/{{ .Package }}"
	"github.com/nekrassov01/aws-describer/internal/tab"
)

func {{ .Name }}(info []{{ .Package }}.{{ .InputType }}, output string, header bool, mergeFields, ignoreFields []int{{ if .HasPolicy }}, document bool{{ end }}) error {
	{{- if .SortStmt }}
	{{ .SortStmt }}
	{{- end }}
	{{- if .MergeStmt }}
	{{ .MergeStmt }}
	{{- end }}
	{{- if .IgnoreStmt }}
	{{ .IgnoreStmt }}
	{{- end }}
	if err := tab.PrintTable(info, output, header, mergeFields, ignoreFields); err != nil {
		return err
	}
	return nil
}`
	if err := tmpl.RenderTemplate("table", template, filePath, data); err != nil {
		return err
	}
	return nil
}

func main() {
	params := []struct {
		filePath string
		data     templateData
	}{
		{
			filePath: "ec2/ec2_instance_default.go",
			data: templateData{
				Name:      "PrintInstanceInfo",
				Package:   "ec2",
				InputType: "InstanceInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].InstanceName != info[j].InstanceName {
						return info[i].InstanceName < info[j].InstanceName
					}
					if info[i].InstanceType != info[j].InstanceType {
						return info[i].InstanceType < info[j].InstanceType
					}
					if info[i].PrivateIpAddress != info[j].PrivateIpAddress {
						return info[i].PrivateIpAddress < info[j].PrivateIpAddress
					}
					return info[i].PrivateIpAddress < info[j].PrivateIpAddress
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_instance_sg.go",
			data: templateData{
				Name:      "PrintInstanceSecurityGroupInfo",
				Package:   "ec2",
				InputType: "InstanceSecurityGroupInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].InstanceName != info[j].InstanceName {
						return info[i].InstanceName < info[j].InstanceName
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].FlowDirection != info[j].FlowDirection {
						return info[i].FlowDirection > info[j].FlowDirection
					}
					if info[i].IpProtocol != info[j].IpProtocol {
						return info[i].IpProtocol < info[j].IpProtocol
					}
					if info[i].FromPort != info[j].FromPort {
						return info[i].FromPort < info[j].FromPort
					}
					if info[i].ToPort != info[j].ToPort {
						return info[i].ToPort < info[j].ToPort
					}
					return info[i].AddressType < info[j].AddressType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4, 5}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_instance_route.go",
			data: templateData{
				Name:      "PrintInstanceRouteInfo",
				Package:   "ec2",
				InputType: "InstanceRouteInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].InstanceName != info[j].InstanceName {
						return info[i].InstanceName < info[j].InstanceName
					}
					if info[i].SubnetName != info[j].SubnetName {
						return info[i].SubnetName < info[j].SubnetName
					}
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].RouteTableName != info[j].RouteTableName {
						return info[i].RouteTableName < info[j].RouteTableName
					}
					if info[i].DestinationType != info[j].DestinationType {
						return info[i].DestinationType < info[j].DestinationType
					}
					return info[i].TargetType < info[j].TargetType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4, 5, 6, 7, 8}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_instance_storage.go",
			data: templateData{
				Name:      "PrintInstanceStorageInfo",
				Package:   "ec2",
				InputType: "InstanceStorageInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].InstanceName != info[j].InstanceName {
						return info[i].InstanceName < info[j].InstanceName
					}
					if info[i].DeviceName != info[j].DeviceName {
						return info[i].DeviceName < info[j].DeviceName
					}
					if info[i].VolumeName != info[j].VolumeName {
						return info[i].VolumeName < info[j].VolumeName
					}
					if info[i].VolumeType != info[j].VolumeType {
						return info[i].VolumeType < info[j].VolumeType
					}
					if info[i].VolumeSize != info[j].VolumeSize {
						return info[i].VolumeSize < info[j].VolumeSize
					}
					return info[i].IOPS < info[j].IOPS
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_instance_backup.go",
			data: templateData{
				Name:      "PrintInstanceBackupInfo",
				Package:   "ec2",
				InputType: "InstanceBackupInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].InstanceName != info[j].InstanceName {
						return info[i].InstanceName < info[j].InstanceName
					}
					if info[i].ImageOwner != info[j].ImageOwner {
						return info[i].ImageOwner < info[j].ImageOwner
					}
					if info[i].ImageName != info[j].ImageName {
						return info[i].ImageName < info[j].ImageName
					}
					if info[i].SnapshotName != info[j].SnapshotName {
						return info[i].SnapshotName < info[j].SnapshotName
					}
					return info[i].VolumeName < info[j].VolumeName
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_instance_lb.go",
			data: templateData{
				Name:      "PrintInstanceLoadBalancerInfo",
				Package:   "ec2",
				InputType: "InstanceLoadBalancerInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].InstanceName != info[j].InstanceName {
						return info[i].InstanceName < info[j].InstanceName
					}
					return info[i].AvailabilityZone < info[j].AvailabilityZone
				})`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_image_default.go",
			data: templateData{
				Name:      "PrintImageInfo",
				Package:   "ec2",
				InputType: "ImageInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					return info[i].ImageName < info[j].ImageName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_image_backup.go",
			data: templateData{
				Name:      "PrintImageBackupInfo",
				Package:   "ec2",
				InputType: "ImageBackupInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					return info[i].ImageName < info[j].ImageName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_sg_default.go",
			data: templateData{
				Name:      "PrintSecurityGroupInfo",
				Package:   "ec2",
				InputType: "SecurityGroupInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].SecurityGroupName != info[j].SecurityGroupName {
						return info[i].SecurityGroupName < info[j].SecurityGroupName
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					return info[i].VpcName < info[j].VpcName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_sg_perms.go",
			data: templateData{
				Name:      "PrintSecurityGroupPermissionsInfo",
				Package:   "ec2",
				InputType: "SecurityGroupPermissionsInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].SecurityGroupName != info[j].SecurityGroupName {
						return info[i].SecurityGroupName < info[j].SecurityGroupName
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].FlowDirection != info[j].FlowDirection {
						return info[i].FlowDirection > info[j].FlowDirection
					}
					if info[i].IpProtocol != info[j].IpProtocol {
						return info[i].IpProtocol < info[j].IpProtocol
					}
					if info[i].FromPort != info[j].FromPort {
						return info[i].FromPort < info[j].FromPort
					}
					if info[i].ToPort != info[j].ToPort {
						return info[i].ToPort < info[j].ToPort
					}
					return info[i].AddressType < info[j].AddressType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_vpc_default.go",
			data: templateData{
				Name:      "PrintVpcInfo",
				Package:   "ec2",
				InputType: "VpcInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].DhcpOptionsName != info[j].DhcpOptionsName {
						return info[i].DhcpOptionsName < info[j].DhcpOptionsName
					}
					if info[i].OwnerId != info[j].OwnerId {
						return info[i].OwnerId < info[j].OwnerId
					}
					if info[i].IsDefault != info[j].IsDefault {
						return info[i].IsDefault
					}
					return info[i].InstanceTenancy < info[j].InstanceTenancy
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_vpc_attr.go",
			data: templateData{
				Name:      "PrintVpcAttributeInfo",
				Package:   "ec2",
				InputType: "VpcAttributeInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].DhcpOptionsName != info[j].DhcpOptionsName {
						return info[i].DhcpOptionsName < info[j].DhcpOptionsName
					}
					if info[i].OwnerId != info[j].OwnerId {
						return info[i].OwnerId < info[j].OwnerId
					}
					if info[i].IsDefault != info[j].IsDefault {
						return info[i].IsDefault
					}
					return info[i].InstanceTenancy < info[j].InstanceTenancy
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_vpc_cidr.go",
			data: templateData{
				Name:      "PrintVpcCidrInfo",
				Package:   "ec2",
				InputType: "VpcCidrInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].DhcpOptionsName != info[j].DhcpOptionsName {
						return info[i].DhcpOptionsName < info[j].DhcpOptionsName
					}
					if info[i].OwnerId != info[j].OwnerId {
						return info[i].OwnerId < info[j].OwnerId
					}
					if info[i].IsDefault != info[j].IsDefault {
						return info[i].IsDefault
					}
					if info[i].InstanceTenancy != info[j].InstanceTenancy {
						return info[i].InstanceTenancy < info[j].InstanceTenancy
					}
					if info[i].AddressType != info[j].AddressType {
						return info[i].AddressType < info[j].AddressType
					}
					if info[i].CidrBlock != info[j].CidrBlock {
						return info[i].CidrBlock < info[j].CidrBlock
					}
					return info[i].State < info[j].State
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4, 5, 6, 7}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_subnet_default.go",
			data: templateData{
				Name:      "PrintSubnetInfo",
				Package:   "ec2",
				InputType: "SubnetInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].SubnetName != info[j].SubnetName {
						return info[i].SubnetName < info[j].SubnetName
					}
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].DefaultForAz != info[j].DefaultForAz {
						return info[j].DefaultForAz
					}
					if info[i].AddressType != info[j].AddressType {
						return info[i].AddressType < info[j].AddressType
					}
					return info[i].CidrBlock < info[j].CidrBlock
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4, 5, 6, 7}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_subnet_route.go",
			data: templateData{
				Name:      "PrintSubnetRouteInfo",
				Package:   "ec2",
				InputType: "SubnetRouteInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].SubnetName != info[j].SubnetName {
						return info[i].SubnetName < info[j].SubnetName
					}
					if info[i].AvailabilityZone != info[j].AvailabilityZone {
						return info[i].AvailabilityZone < info[j].AvailabilityZone
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].RouteTableName != info[j].RouteTableName {
						return info[i].RouteTableName < info[j].RouteTableName
					}
					if info[i].DestinationType != info[j].DestinationType {
						return info[i].DestinationType < info[j].DestinationType
					}
					return info[i].TargetType < info[j].TargetType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3, 4, 5, 6}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_rtb_default.go",
			data: templateData{
				Name:      "PrintRouteTableInfo",
				Package:   "ec2",
				InputType: "RouteTableInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].RouteTableName != info[j].RouteTableName {
						return info[i].RouteTableName < info[j].RouteTableName
					}
					if info[i].DestinationType != info[j].DestinationType {
						return info[i].DestinationType < info[j].DestinationType
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].Destination != info[j].Destination {
						return info[i].Destination < info[j].Destination
					}
					if info[i].TargetType != info[j].TargetType {
						return info[i].TargetType < info[j].TargetType
					}
					if info[i].Target != info[j].Target {
						return info[i].Target < info[j].Target
					}
					return info[i].State < info[j].State
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "ec2/ec2_rtb_assoc.go",
			data: templateData{
				Name:      "PrintRouteTableAssociationInfo",
				Package:   "ec2",
				InputType: "RouteTableAssociationInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].Region != info[j].Region {
						return info[i].Region < info[j].Region
					}
					if info[i].RouteTableName != info[j].RouteTableName {
						return info[i].RouteTableName < info[j].RouteTableName
					}
					if info[i].VpcName != info[j].VpcName {
						return info[i].VpcName < info[j].VpcName
					}
					if info[i].Main != info[j].Main {
						return info[j].Main
					}
					if info[i].SubnetName != info[j].SubnetName {
						return info[i].SubnetName < info[j].SubnetName
					}
					return info[i].State < info[j].State
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1, 2, 3}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "iam/iam_user_default.go",
			data: templateData{
				Name:      "PrintUserInfo",
				Package:   "iam",
				InputType: "UserInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					return info[i].UserName < info[j].UserName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "iam/iam_user_policy.go",
			data: templateData{
				Name:      "PrintUserPolicyInfo",
				Package:   "iam",
				InputType: "UserPolicyInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].UserName != info[j].UserName {
						return info[i].UserName < info[j].UserName
					}
					return info[i].PolicyType < info[j].PolicyType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1}
				}`,
				IgnoreStmt: `if !document {
					ignoreFields = []int{5}
				}`,
				HasPolicy: true,
			},
		},
		{
			filePath: "iam/iam_user_group.go",
			data: templateData{
				Name:      "PrintUserGroupInfo",
				Package:   "iam",
				InputType: "UserGroupInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					return info[i].UserName < info[j].UserName
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1}
				}`,
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "iam/iam_user_assoc.go",
			data: templateData{
				Name:      "PrintUserAssociationInfo",
				Package:   "iam",
				InputType: "UserAssociationInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].UserName != info[j].UserName {
						return info[i].UserName < info[j].UserName
					}
					if info[i].AttachedBy != info[j].AttachedBy {
						return info[i].AttachedBy > info[j].AttachedBy
					}
					return info[i].PolicyType < info[j].PolicyType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1}
				}`,
				IgnoreStmt: `if !document {
					ignoreFields = []int{4}
				}`,
				HasPolicy: true,
			},
		},
		{
			filePath: "iam/iam_group_default.go",
			data: templateData{
				Name:      "PrintGroupInfo",
				Package:   "iam",
				InputType: "GroupInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					return info[i].GroupName < info[j].GroupName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "iam/iam_group_policy.go",
			data: templateData{
				Name:      "PrintGroupPolicyInfo",
				Package:   "iam",
				InputType: "GroupPolicyInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].GroupName != info[j].GroupName {
						return info[i].GroupName < info[j].GroupName
					}
					return info[i].PolicyType < info[j].PolicyType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1}
				}`,
				IgnoreStmt: `if !document {
					ignoreFields = []int{5}
				}`,
				HasPolicy: true,
			},
		},
		{
			filePath: "iam/iam_role_default.go",
			data: templateData{
				Name:      "PrintRoleInfo",
				Package:   "iam",
				InputType: "RoleInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					return info[i].RoleName < info[j].RoleName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "iam/iam_role_policy.go",
			data: templateData{
				Name:      "PrintRolePolicyInfo",
				Package:   "iam",
				InputType: "RolePolicyInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].RoleName != info[j].RoleName {
						return info[i].RoleName < info[j].RoleName
					}
					return info[i].PolicyType < info[j].PolicyType
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1}
				}`,
				IgnoreStmt: `if !document {
					ignoreFields = []int{5}
				}`,
				HasPolicy: true,
			},
		},
		{
			filePath: "iam/iam_role_assume.go",
			data: templateData{
				Name:      "PrintRoleAssumeInfo",
				Package:   "iam",
				InputType: "RoleAssumeInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					return info[i].RoleName < info[j].RoleName
				})`,
				MergeStmt:  "",
				IgnoreStmt: "",
				HasPolicy:  false,
			},
		},
		{
			filePath: "iam/iam_policy_default.go",
			data: templateData{
				Name:      "PrintPolicyInfo",
				Package:   "iam",
				InputType: "PolicyInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					return info[i].PolicyName < info[j].PolicyName
				})`,
				MergeStmt: `if len(mergeFields) == 0 {
					mergeFields = []int{0, 1}
				}`,
				IgnoreStmt: `if !document {
					ignoreFields = []int{8}
				}`,
				HasPolicy: true,
			},
		},
		{
			filePath: "s3/s3_bucket_default.go",
			data: templateData{
				Name:      "PrintBucketInfo",
				Package:   "s3",
				InputType: "BucketInfo",
				SortStmt: `sort.SliceStable(info, func(i, j int) bool {
					if info[i].BucketName != info[j].BucketName {
						return info[i].BucketName < info[j].BucketName
					}
					return info[i].Location < info[j].Location
				})`,
				MergeStmt: `if !document {
					ignoreFields = []int{3}
				}`,
				IgnoreStmt: "",
				HasPolicy:  true,
			},
		},
	}
	for _, param := range params {
		if err := gen(param.filePath, param.data); err != nil {
			log.Fatal(err)
		}
	}
}
