// Code generated by api/s3/s3_gen.go. DO NOT EDIT.

package s3

import (
	"context"
	"runtime"
	"slices"
	"sync"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"golang.org/x/sync/errgroup"
	"golang.org/x/time/rate"
)

func ListBucketInfo(ctx context.Context, client IS3Client, names []string, document bool, filters []string) ([]BucketInfo, error) {
	eg, ctx := errgroup.WithContext(ctx)
	l := rate.NewLimiter(rate.Limit(50), 1)
	ich := make(chan BucketInfo, runtime.NumCPU())
	var info []BucketInfo
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := range ich {
			info = append(info, i)
		}
	}()
	o, err := client.ListBuckets(ctx, &s3.ListBucketsInput{})
	if err != nil {
		return nil, err
	}
	for _, item := range o.Buckets {
		item := item
		if len(names) > 0 && !slices.Contains(names, aws.ToString(item.Name)) {
			continue
		}
		eg.Go(func() error {
			if err := l.Wait(ctx); err != nil {
				return err
			}
			if err := GetBucketInfo(ctx, client, ich, item, document, filters); err != nil {
				return err
			}
			return nil
		})
	}
	if err := eg.Wait(); err != nil {
		close(ich)
		return nil, err
	}
	close(ich)
	wg.Wait()
	return info, nil
}
