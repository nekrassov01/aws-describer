//go:build ignore

package main

import (
	"log"

	"github.com/nekrassov01/aws-describer/internal/tmpl"
)

type templateData struct {
	Name        string
	ResultType  string
	FetchStmt   string
	Describer   string
	IterateStmt string
}

func gen(filePath string, data templateData) error {
	template := `// Code generated by api/ec2/ec2_gen.go. DO NOT EDIT.

package ec2

import (
	"context"
	"runtime"
	"sync"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"golang.org/x/sync/errgroup"
	"golang.org/x/time/rate"
)

func {{ .Name }}(ctx context.Context, cfg *aws.Config, regions []string, ids, names []string, filters []types.Filter, defaultFilter bool) ([]{{ .ResultType }}, error) {
	client := NewEc2Client(cfg)
	eg, ctx := errgroup.WithContext(ctx)
	ich := make(chan {{ .ResultType }}, runtime.NumCPU())
	var info []{{ .ResultType }}
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := range ich {
			info = append(info, i)
		}
	}()
	for _, region := range regions {
		region := region
		// https://docs.aws.amazon.com/AWSEC2/latest/APIReference/throttling.html
		l := rate.NewLimiter(rate.Limit(50), 1)
		eg.Go(func() error {
			{{- if .FetchStmt }}
			{{ .FetchStmt }}
			{{- end }}
			var token *string
			for {
				if err := l.Wait(ctx); err != nil {
					return err
				}
				input := Create{{ .Describer }}Input(ids, names, filters, defaultFilter)
				input.NextToken = token
				opt := func(opt *ec2.Options) {
					opt.Region = region
				}
				o, err := client.{{ .Describer }}(ctx, input, opt)
				if err != nil {
					return err
				}
				{{ .IterateStmt }}
				token = o.NextToken
				if token == nil {
					break
				}
			}
			return nil
		})
	}
	if err := eg.Wait(); err != nil {
		close(ich)
		return nil, err
	}
	close(ich)
	wg.Wait()
	return info, nil
}`
	if err := tmpl.RenderTemplate("ec2", template, filePath, data); err != nil {
		return err
	}
	return nil
}

func main() {
	params := []struct {
		filePath string
		data     templateData
	}{
		{
			filePath: "ec2/ec2_instance_default.go",
			data: templateData{
				Name:        "DescribeInstanceInfo",
				ResultType:  "InstanceInfo",
				Describer:   "DescribeInstances",
				FetchStmt:   "",
				IterateStmt: "GetInstanceInfo(ich, o.Reservations)",
			},
		},
		{
			filePath: "ec2/ec2_instance_sg.go",
			data: templateData{
				Name:       "DescribeInstanceSecurityGroupInfo",
				ResultType: "InstanceSecurityGroupInfo",
				Describer:  "DescribeInstances",
				FetchStmt: `segs, vpcs, upls, mpls, err := FetchDataForInstanceSecurityGroupInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetInstanceSecurityGroupInfo(ich, o.Reservations, region, segs, vpcs, upls, mpls); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_instance_rtb.go",
			data: templateData{
				Name:       "DescribeInstanceRouteInfo",
				ResultType: "InstanceRouteInfo",
				Describer:  "DescribeInstances",
				FetchStmt: `vpcs, sbns, rtbs, err := FetchDataForInstanceRouteInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetInstanceRouteInfo(ich, o.Reservations, region, vpcs, sbns, rtbs); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_instance_storage.go",
			data: templateData{
				Name:       "DescribeInstanceStorageInfo",
				ResultType: "InstanceStorageInfo",
				Describer:  "DescribeInstances",
				FetchStmt: `vols, err := client.FetchVolumes(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: "GetInstanceStorageInfo(ich, o.Reservations, vols)",
			},
		},
		{
			filePath: "ec2/ec2_instance_backup.go",
			data: templateData{
				Name:       "DescribeInstanceBackupInfo",
				ResultType: "InstanceBackupInfo",
				Describer:  "DescribeInstances",
				FetchStmt: `imgs, snps, vols, err := FetchDataForInstanceBackupInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: "GetInstanceBackupInfo(ich, o.Reservations, imgs, snps, vols)",
			},
		},
		{
			filePath: "ec2/ec2_instance_lb.go",
			data: templateData{
				Name:       "DescribeInstanceLoadBalancerInfo",
				ResultType: "InstanceLoadBalancerInfo",
				Describer:  "DescribeInstances",
				FetchStmt: `ids, idmv1, idmv2, err := FetchDataForInstanceLoadBalancerInfo(ctx, l, cfg, region, ids, names)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetInstanceLoadBalancerInfo(ich, o.Reservations, idmv1, idmv2); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_image_default.go",
			data: templateData{
				Name:        "DescribeImageInfo",
				ResultType:  "ImageInfo",
				Describer:   "DescribeImages",
				FetchStmt:   "",
				IterateStmt: "GetImageInfo(ich, o.Images, region)",
			},
		},
		{
			filePath: "ec2/ec2_image_backup.go",
			data: templateData{
				Name:       "DescribeImageBackupInfo",
				ResultType: "ImageBackupInfo",
				Describer:  "DescribeImages",
				FetchStmt: `snps, vols, err := FetchDataForImageBackupInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: "GetImageBackupInfo(ich, o.Images, region, snps, vols)",
			},
		},
		{
			filePath: "ec2/ec2_sg_default.go",
			data: templateData{
				Name:       "DescribeSecurityGroupInfo",
				ResultType: "SecurityGroupInfo",
				Describer:  "DescribeSecurityGroups",
				FetchStmt: `vpcs, err := client.FetchVpcs(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetSecurityGroupInfo(ich, o.SecurityGroups, region, vpcs); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_sg_perms.go",
			data: templateData{
				Name:       "DescribeSecurityGroupPermissionsInfo",
				ResultType: "SecurityGroupPermissionsInfo",
				Describer:  "DescribeSecurityGroups",
				FetchStmt: `vpcs, upls, mpls, err := FetchDataForSecurityGroupPermissionsInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetSecurityGroupPermissionsInfo(ich, o.SecurityGroups, region, vpcs, upls, mpls); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_vpc_default.go",
			data: templateData{
				Name:       "DescribeVpcInfo",
				ResultType: "VpcInfo",
				Describer:  "DescribeVpcs",
				FetchStmt: `dopts, err := client.FetchDhcpOptions(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetVpcInfo(ich, o.Vpcs, region, dopts); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_vpc_attr.go",
			data: templateData{
				Name:       "DescribeVpcAttributeInfo",
				ResultType: "VpcAttributeInfo",
				Describer:  "DescribeVpcs",
				FetchStmt: `dopts, err := client.FetchDhcpOptions(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetVpcAttributeInfo(ctx, l, client, ich, o.Vpcs, region, dopts); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_vpc_cidr.go",
			data: templateData{
				Name:       "DescribeVpcCidrInfo",
				ResultType: "VpcCidrInfo",
				Describer:  "DescribeVpcs",
				FetchStmt: `dopts, err := client.FetchDhcpOptions(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetVpcCidrInfo(ich, o.Vpcs, region, dopts); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_subnet_default.go",
			data: templateData{
				Name:       "DescribeSubnetInfo",
				ResultType: "SubnetInfo",
				Describer:  "DescribeSubnets",
				FetchStmt: `vpcs, err := client.FetchVpcs(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetSubnetInfo(ich, o.Subnets, region, vpcs); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_subnet_route.go",
			data: templateData{
				Name:       "DescribeSubnetRouteInfo",
				ResultType: "SubnetRouteInfo",
				Describer:  "DescribeSubnets",
				FetchStmt: `vpcs, rtbs, err := FetchDataForSubnetRouteInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetSubnetRouteInfo(ich, o.Subnets, region, vpcs, rtbs); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_rtb_default.go",
			data: templateData{
				Name:       "DescribeRouteTableInfo",
				ResultType: "RouteTableInfo",
				Describer:  "DescribeRouteTables",
				FetchStmt: `vpcs, err := client.FetchVpcs(ctx, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetRouteTableInfo(ich, o.RouteTables, region, vpcs); err != nil {
					return err
				}`,
			},
		},
		{
			filePath: "ec2/ec2_rtb_assoc.go",
			data: templateData{
				Name:       "DescribeRouteTableAssociationInfo",
				ResultType: "RouteTableAssociationInfo",
				Describer:  "DescribeRouteTables",
				FetchStmt: `vpcs, sbns, err := FetchDataForRouteTableAssociationInfo(ctx, l, client, region)
				if err != nil {
					return err
				}`,
				IterateStmt: `if err := GetRouteTableAssociationInfo(ich, o.RouteTables, region, vpcs, sbns); err != nil {
					return err
				}`,
			},
		},
	}
	for _, param := range params {
		if err := gen(param.filePath, param.data); err != nil {
			log.Fatal(err)
		}
	}
}
