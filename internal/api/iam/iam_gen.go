//go:build ignore

package main

import (
	"log"

	"github.com/nekrassov01/aws-describer/internal/tmpl"
)

type templateData struct {
	FuncName    string
	Items       string
	ResultType  string
	Paginator   string
	InputType   string
	Ids         string
	Names       string
	IterateStmt string
	HasPolicy   bool
	HasScope    bool
}

func gen(filePath string, data templateData) error {
	template := `// Code generated by api/iam/iam_gen.go. DO NOT EDIT.

package iam

import (
	"context"
	"runtime"
	"slices"
	"sync"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"golang.org/x/sync/errgroup"
	"golang.org/x/time/rate"
)

func {{ .FuncName }}(ctx context.Context, client IIamClient, ids, names []string{{ if .HasScope }}, scope string{{ end }}{{ if .HasPolicy }}, document bool, filters []string{{ end }}) ([]{{ .ResultType }}, error) {
	{{- if and (.HasPolicy) (not .HasScope) }}
	pols, err := client.FetchCustomerPolicies(ctx)
	if err != nil {
		return nil, err
	}
	{{- end }}
	{{- if .HasScope }}
	sanitizedScope, err := client.GetPolicyScope(scope)
	if err != nil {
		return nil, err
	}
	{{- end }}
	eg, ctx := errgroup.WithContext(ctx)
	l := rate.NewLimiter(rate.Limit(50), 1)
	ich := make(chan {{ .ResultType }}, runtime.NumCPU())
	var info []{{ .ResultType }}
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := range ich {
			info = append(info, i)
		}
	}()
	p := iam.{{ .Paginator }}(client, &iam.{{ .InputType }}{{ if .HasScope }}{Scope: sanitizedScope}{{ else }}{}{{ end }})
	for p.HasMorePages() {
		page, err := p.NextPage(ctx)
		if err != nil {
			return nil, err
		}
		for _, item := range page.{{ .Items }} {
			item := item
			if len(ids) > 0 && !slices.Contains(ids, aws.ToString(item.{{ .Ids }})) {
				continue
			}
			if len(names) > 0 && !slices.Contains(names, aws.ToString(item.{{ .Names }})) {
				continue
			}
			eg.Go(func() error {
				if err := l.Wait(ctx); err != nil {
					return err
				}
				{{ .IterateStmt }}
				return nil
			})
		}
	}
	if err := eg.Wait(); err != nil {
		close(ich)
		return nil, err
	}
	close(ich)
	wg.Wait()
	return info, nil
}`
	if err := tmpl.RenderTemplate("iam", template, filePath, data); err != nil {
		return err
	}
	return nil
}

func main() {
	params := []struct {
		filePath string
		data     templateData
	}{
		{
			filePath: "iam/iam_user_default.go",
			data: templateData{
				FuncName:    "ListUserInfo",
				Items:       "Users",
				ResultType:  "UserInfo",
				Paginator:   "NewListUsersPaginator",
				InputType:   "ListUsersInput",
				Ids:         "UserId",
				Names:       "UserName",
				IterateStmt: "GetUserInfo(ich, item)",
				HasPolicy:   false,
				HasScope:    false,
			},
		},
		{
			filePath: "iam/iam_user_policy.go",
			data: templateData{
				FuncName:   "ListUserPolicyInfo",
				Items:      "Users",
				ResultType: "UserPolicyInfo",
				Paginator:  "NewListUsersPaginator",
				InputType:  "ListUsersInput",
				Ids:        "UserId",
				Names:      "UserName",
				IterateStmt: `if err := GetUserPolicyInfo(ctx, l, client, ich, item, document, filters, pols); err != nil {
					return err
				}`,
				HasPolicy: true,
				HasScope:  false,
			},
		},
		{
			filePath: "iam/iam_user_group.go",
			data: templateData{
				FuncName:   "ListUserGroupInfo",
				Items:      "Users",
				ResultType: "UserGroupInfo",
				Paginator:  "NewListUsersPaginator",
				InputType:  "ListUsersInput",
				Ids:        "UserId",
				Names:      "UserName",
				IterateStmt: `if err := GetUserGroupInfo(ctx, client, ich, item,); err != nil {
					return err
				}`,
				HasPolicy: false,
				HasScope:  false,
			},
		},
		{
			filePath: "iam/iam_user_assoc.go",
			data: templateData{
				FuncName:   "ListUserAssociationInfo",
				Items:      "Users",
				ResultType: "UserAssociationInfo",
				Paginator:  "NewListUsersPaginator",
				InputType:  "ListUsersInput",
				Ids:        "UserId",
				Names:      "UserName",
				IterateStmt: `if err := GetUserAssociationInfo(ctx, l, client, ich, item, document, filters, pols); err != nil {
					return err
				}`,
				HasPolicy: true,
				HasScope:  false,
			},
		},
		{
			filePath: "iam/iam_group_default.go",
			data: templateData{
				FuncName:    "ListGroupInfo",
				Items:       "Groups",
				ResultType:  "GroupInfo",
				Paginator:   "NewListGroupsPaginator",
				InputType:   "ListGroupsInput",
				Ids:         "GroupId",
				Names:       "GroupName",
				IterateStmt: "GetGroupInfo(ich, item)",
				HasPolicy:   false,
				HasScope:    false,
			},
		},
		{
			filePath: "iam/iam_group_policy.go",
			data: templateData{
				FuncName:   "ListGroupPolicyInfo",
				Items:      "Groups",
				ResultType: "GroupPolicyInfo",
				Paginator:  "NewListGroupsPaginator",
				InputType:  "ListGroupsInput",
				Ids:        "GroupId",
				Names:      "GroupName",
				IterateStmt: `if err := GetGroupPolicyInfo(ctx, l, client, ich, item, document, filters, pols); err != nil {
					return err
				}`,
				HasPolicy: true,
				HasScope:  false,
			},
		},
		{
			filePath: "iam/iam_role_default.go",
			data: templateData{
				FuncName:    "ListRoleInfo",
				Items:       "Roles",
				ResultType:  "RoleInfo",
				Paginator:   "NewListRolesPaginator",
				InputType:   "ListRolesInput",
				Ids:         "RoleId",
				Names:       "RoleName",
				IterateStmt: "GetRoleInfo(ich, item)",
				HasPolicy:   false,
				HasScope:    false,
			},
		},
		{
			filePath: "iam/iam_role_policy.go",
			data: templateData{
				FuncName:   "ListRolePolicyInfo",
				Items:      "Roles",
				ResultType: "RolePolicyInfo",
				Paginator:  "NewListRolesPaginator",
				InputType:  "ListRolesInput",
				Ids:        "RoleId",
				Names:      "RoleName",
				IterateStmt: `if err := GetRolePolicyInfo(ctx, l, client, ich, item, document, filters, pols); err != nil {
					return err
				}`,
				HasPolicy: true,
				HasScope:  false,
			},
		},
		{
			filePath: "iam/iam_role_assume.go",
			data: templateData{
				FuncName:   "ListRoleAssumeInfo",
				Items:      "Roles",
				ResultType: "RoleAssumeInfo",
				Paginator:  "NewListRolesPaginator",
				InputType:  "ListRolesInput",
				Ids:        "RoleId",
				Names:      "RoleName",
				IterateStmt: `if err := GetRoleAssumeInfo(ich, item); err != nil {
					return err
				}`,
				HasPolicy: false,
				HasScope:  false,
			},
		},
		{
			filePath: "iam/iam_policy_default.go",
			data: templateData{
				FuncName:   "ListPolicyInfo",
				Items:      "Policies",
				ResultType: "PolicyInfo",
				Paginator:  "NewListPoliciesPaginator",
				InputType:  "ListPoliciesInput",
				Ids:        "PolicyId",
				Names:      "PolicyName",
				IterateStmt: `if err := GetPolicyInfo(ctx, client, ich, item, document, filters); err != nil {
					return nil
				}`,
				HasPolicy: true,
				HasScope:  true,
			},
		},
	}
	for _, param := range params {
		if err := gen(param.filePath, param.data); err != nil {
			log.Fatal(err)
		}
	}
}
