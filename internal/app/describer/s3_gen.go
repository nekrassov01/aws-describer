//go:build ignore

package main

import (
	"log"

	"github.com/nekrassov01/aws-describer/internal/tmpl"
)

type templateData struct {
	Name          string
	ListFuncName  string
	PrintFuncName string
}

func gen(filePath string, data templateData) error {
	template := `// Code generated by describer/s3_gen.go. DO NOT EDIT.

package describer

import (
	"fmt"

	s3api "github.com/nekrassov01/aws-describer/internal/api/s3"
	s3tab "github.com/nekrassov01/aws-describer/internal/tab/s3"
	"github.com/urfave/cli/v2"
)

func (a *app) {{ .Name }}(c *cli.Context) error {
	if !c.IsSet(a.flag.document.Name) && c.IsSet(a.flag.documentFilter.Name) {
		return fmt.Errorf("invalid args/flags combination: \"%s\" are valid only when \"%s\" is enabled", a.flag.documentFilter.Name, a.flag.document.Name)
	}
	client := s3api.NewS3Client(a.config)
	info, err := s3api.{{ .ListFuncName }}(c.Context, client, a.flag.names.GetDestination(), a.dest.document, a.flag.documentFilter.GetDestination())
	if err != nil {
		return err
	}
	if err := s3tab.{{ .PrintFuncName }}(info, a.dest.output, a.dest.header, a.flag.merge.GetDestination(), a.flag.ignore.GetDestination(), a.dest.document); err != nil {
		return err
	}
	return nil
}`
	if err := tmpl.RenderTemplate("s3", template, filePath, data); err != nil {
		return err
	}
	return nil
}

func main() {
	params := []struct {
		filePath string
		data     templateData
	}{
		{
			filePath: "s3_bucket_default.go",
			data: templateData{
				Name:          "doBucketInfo",
				ListFuncName:  "ListBucketInfo",
				PrintFuncName: "PrintBucketInfo",
			},
		},
	}
	for _, param := range params {
		if err := gen(param.filePath, param.data); err != nil {
			log.Fatal(err)
		}
	}
}
