//go:build ignore

package main

import (
	"log"

	"github.com/nekrassov01/aws-describer/internal/tmpl"
)

type templateData struct {
	Name          string
	ListFuncName  string
	PrintFuncName string
	HasPolicy     bool
	HasScope      bool
}

func gen(filePath string, data templateData) error {
	template := `// Code generated by describer/iam_gen.go. DO NOT EDIT.

package describer

import (
	"fmt"

	iamapi "github.com/nekrassov01/aws-describer/internal/api/iam"
	iamtab "github.com/nekrassov01/aws-describer/internal/tab/iam"
	"github.com/urfave/cli/v2"
)

func (a *app) {{ .Name }}(c *cli.Context) error {
	{{- if .HasPolicy }}
	if !c.IsSet(a.flag.document.Name) && c.IsSet(a.flag.documentFilter.Name) {
		return fmt.Errorf("invalid args/flags combination: \"%s\" is valid only when \"%s\" is enabled", a.flag.documentFilter.Name, a.flag.document.Name)
	}
	{{- else }}
	if c.IsSet(a.flag.document.Name) || c.IsSet(a.flag.documentFilter.Name) {
		return fmt.Errorf("invalid args/flags combination: \"%s\" and \"%s\" are valid only when \"%s\" is selected at \"%s\"", a.flag.document.Name, a.flag.documentFilter.Name, iamGroupActionMemberPolicy.String(), a.flag.join.Name)
	}
	{{- end }}
	{{- if .HasScope }}
	if a.dest.iamPolicyScope != iamapi.PolicyScopeTypeLocal.String() && (len(a.flag.ids.GetDestination()) == 0 && len(a.flag.names.GetDestination()) == 0) {
		return fmt.Errorf("invalid args/flags combination: \"%s\" or \"%s\" are required when \"%s\" is not \"%s\"", a.flag.ids.Name, a.flag.names.Name, a.flag.iamPolicyScope.Name, iamapi.PolicyScopeTypeLocal.String())
	}
	{{- end }}
	client := iamapi.NewIamClient(a.config)
	info, err := iamapi.{{ .ListFuncName }}(c.Context, client, a.flag.ids.GetDestination(), a.flag.names.GetDestination(){{ if .HasScope }}, a.dest.iamPolicyScope{{ end }}{{ if .HasPolicy }}, a.dest.document, a.flag.documentFilter.GetDestination(){{ end }})
	if err != nil {
		return err
	}
	if err := iamtab.{{ .PrintFuncName }}(info, a.dest.output, a.dest.header, a.flag.merge.GetDestination(), a.flag.ignore.GetDestination(){{ if .HasPolicy }}, a.dest.document{{ end }}); err != nil {
		return err
	}
	return nil
}`
	if err := tmpl.RenderTemplate("iam", template, filePath, data); err != nil {
		return err
	}
	return nil
}

func main() {
	params := []struct {
		filePath string
		data     templateData
	}{
		{
			filePath: "iam_user_default.go",
			data: templateData{
				Name:          "doUserInfo",
				ListFuncName:  "ListUserInfo",
				PrintFuncName: "PrintUserInfo",
				HasPolicy:     false,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_user_policy.go",
			data: templateData{
				Name:          "doUserPolicyInfo",
				ListFuncName:  "ListUserPolicyInfo",
				PrintFuncName: "PrintUserPolicyInfo",
				HasPolicy:     true,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_user_group.go",
			data: templateData{
				Name:          "doUserGroupInfo",
				ListFuncName:  "ListUserGroupInfo",
				PrintFuncName: "PrintUserGroupInfo",
				HasPolicy:     false,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_user_assoc.go",
			data: templateData{
				Name:          "doUserAssociationInfo",
				ListFuncName:  "ListUserAssociationInfo",
				PrintFuncName: "PrintUserAssociationInfo",
				HasPolicy:     true,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_group_default.go",
			data: templateData{
				Name:          "doGroupInfo",
				ListFuncName:  "ListGroupInfo",
				PrintFuncName: "PrintGroupInfo",
				HasPolicy:     false,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_group_policy.go",
			data: templateData{
				Name:          "doGroupPolicyInfo",
				ListFuncName:  "ListGroupPolicyInfo",
				PrintFuncName: "PrintGroupPolicyInfo",
				HasPolicy:     true,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_role_default.go",
			data: templateData{
				Name:          "doRoleInfo",
				ListFuncName:  "ListRoleInfo",
				PrintFuncName: "PrintRoleInfo",
				HasPolicy:     false,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_role_policy.go",
			data: templateData{
				Name:          "doRolePolicyInfo",
				ListFuncName:  "ListRolePolicyInfo",
				PrintFuncName: "PrintRolePolicyInfo",
				HasPolicy:     true,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_role_assume.go",
			data: templateData{
				Name:          "doRoleAssumeInfo",
				ListFuncName:  "ListRoleAssumeInfo",
				PrintFuncName: "PrintRoleAssumeInfo",
				HasPolicy:     false,
				HasScope:      false,
			},
		},
		{
			filePath: "iam_policy_default.go",
			data: templateData{
				Name:          "doPolicyInfo",
				ListFuncName:  "ListPolicyInfo",
				PrintFuncName: "PrintPolicyInfo",
				HasPolicy:     true,
				HasScope:      true,
			},
		},
	}
	for _, param := range params {
		if err := gen(param.filePath, param.data); err != nil {
			log.Fatal(err)
		}
	}
}
